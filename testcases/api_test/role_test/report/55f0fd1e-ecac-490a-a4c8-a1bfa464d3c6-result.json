{"name": "test_delete_role[管理员token-1846079261643087883-False-10089-当前角色含有子角色!]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected message: 当前角色含有子角色!, but got: 当前角色含有子角色！\nassert '当前角色含有子角色！' == '当前角色含有子角色!'\n  \n  - 当前角色含有子角色!\n  ?          ^\n  + 当前角色含有子角色！\n  ?          ^", "trace": "self = <testcases.api_test.role_test.test_05_delete_role.TestDeleteRole object at 0x0000024157B01670>\nget_admin_token_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc3NzA5MCwiZXhwIjoxNzMwNzgwNjkwLCJpZCI6MTg0NjAzMDEwOTI2MDAzNDA1MH0.Ntq9DvYOnHgNvyvF1JNXRkui_59O96oXn-AY1IBkprk'\nget_nopri_user_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc3NzA5MCwiZXhwIjoxNzMwNzgwNjkwLCJpZCI6MTg0NjgwMTQ0MjQzMzY4MzQ1OH0.PoM5LBCPz9ludjPnQkahgPLfYu2Vz64SNQNFh0QpnIk'\ntoken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc3NzA5MCwiZXhwIjoxNzMwNzgwNjkwLCJpZCI6MTg0NjAzMDEwOTI2MDAzNDA1MH0.Ntq9DvYOnHgNvyvF1JNXRkui_59O96oXn-AY1IBkprk'\nroleId = 1846079261643087883, expect_result = False, expect_code = 10089\nexpect_msg = '当前角色含有子角色!'\n\n    @allure.story(\"用例--删除角色\")\n    @allure.description(\"该用例是针对删除角色接口的测试\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"token,roleId,expect_result,expect_code, expect_msg\",\n                             api_data[\"test_delete_role\"])\n    def test_delete_role(self,get_admin_token_fixture,get_nopri_user_fixture,token,roleId,expect_result,expect_code, expect_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        if token==\"管理员token\":\n            token=get_admin_token_fixture\n        elif token==\"无权限token\":\n            token=get_nopri_user_fixture\n        result = delete_role(token, roleId)\n        if result.success:\n            logger.info(\"*************** 恢复删除数据 ***************\")\n            db.select_db(f\" update role set is_delete=0 where id={roleId}\")\n>       assert_results(result,expect_result, expect_code, expect_msg)\n\ntest_05_delete_role.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresult = <api.result_api.ResultBase object at 0x0000024157C0A790>\nexpect_result = False, expect_code = 10089, expect_msg = '当前角色含有子角色!'\n\n    def assert_results(result, expect_result, expect_code, expect_msg):\n        \"\"\"\n        断言结果并记录日志。\n        参数:\n            result: 实际结果对象，应该包含success, error, data等属性。\n            expect_result: 期望的成功状态。\n            expect_code: 期望的返回code。\n            expect_msg: 期望的返回message。\n        \"\"\"\n    \n        # 断言实际结果与期望结果相同\n        assert result.success == expect_result, result.error\n        if \"接口请求失败\" in result.error:\n            assert False\n        # 记录期望和实际结果\n        logger.info(\"code ==>> 期望结果：{}， 实际结果：{}\".format(expect_code, result.data[\"code\"]))\n        logger.info(\"返回信息 ==>> 期望结果：{}， 实际结果：{}\".format(expect_msg, result.data[\"message\"]))\n        # 进一步断言返回的code和message\n        assert result.data[\"code\"] == expect_code, \"Expected code: {}, but got: {}\".format(expect_code, result.data[\"code\"])\n>       assert result.data[\"message\"] == expect_msg, \"Expected message: {}, but got: {}\".format(expect_msg,\n                                                                                                result.data[\"message\"])\nE       AssertionError: Expected message: 当前角色含有子角色!, but got: 当前角色含有子角色！\nE       assert '当前角色含有子角色！' == '当前角色含有子角色!'\nE         \nE         - 当前角色含有子角色!\nE         ?          ^\nE         + 当前角色含有子角色！\nE         ?          ^\n\n..\\..\\conftest.py:33: AssertionError"}, "description": "该用例是针对删除角色接口的测试", "attachments": [{"name": "log", "source": "b7ed156f-a4f8-4d66-acd6-6c425df6ba52-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "token", "value": "'管理员token'"}, {"name": "roleId", "value": "1846079261643087883"}, {"name": "expect_result", "value": "False"}, {"name": "expect_code", "value": "10089"}, {"name": "expect_msg", "value": "'当前角色含有子角色!'"}], "start": 1730777093961, "stop": 1730777094921, "uuid": "f8fa7de1-c372-4b00-a574-f80619f20c0c", "historyId": "f2bce25c378ffb06239538376b463fe1", "testCaseId": "c0d920aacbf216b040ed3f5d67dcc65a", "fullName": "testcases.api_test.role_test.test_05_delete_role.TestDeleteRole#test_delete_role", "labels": [{"name": "epic", "value": "针对单个接口的测试"}, {"name": "story", "value": "用例--删除角色"}, {"name": "feature", "value": "角色模块"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test.role_test"}, {"name": "suite", "value": "test_05_delete_role"}, {"name": "subSuite", "value": "TestDeleteRole"}, {"name": "host", "value": "CQCA202413058N"}, {"name": "thread", "value": "17428-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.role_test.test_05_delete_role"}]}