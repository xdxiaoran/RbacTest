{"name": "test_update_password[测试token-1849351355764076546-18592037348-18592037348-True-200-操作成功]", "status": "broken", "statusDetails": {"message": "TypeError: Object of type module is not JSON serializable", "trace": "self = <testcases.api_test.user_test.test_05_updatePassword.TestUpdatePassword object at 0x000002063C4C0DF0>\nget_test_user_token_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDcxMTU5MiwiZXhwIjoxNzMwNzE1MTkyLCJpZCI6MTg0OTM1MTM1NTc2NDA3NjU0Nn0.xeelolrgCxUPQrhy0xnI3Zxh5RZ-dQWJEIrBmgHvlUI'\nget_admin_token_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDcxMTU5MywiZXhwIjoxNzMwNzE1MTkzLCJpZCI6MTg0NjAzMDEwOTI2MDAzNDA1MH0.lRAH8TsW_hUkQogDROj9PvgyX0wYUapMx9uTVtBaF0U'\nget_nopri_user_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDcxMTU5MywiZXhwIjoxNzMwNzE1MTkzLCJpZCI6MTg0NjgwMTQ0MjQzMzY4MzQ1OH0.xzpKUdHkXEhbgWdiAzeYm5ja1pRKJ4SFQw0QicVozKA'\ntoken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDcxMTU5MiwiZXhwIjoxNzMwNzE1MTkyLCJpZCI6MTg0OTM1MTM1NTc2NDA3NjU0Nn0.xeelolrgCxUPQrhy0xnI3Zxh5RZ-dQWJEIrBmgHvlUI'\nUserId = 1849351355764076546, oldPassword = '18592037348'\nnewPassword = '18592037348', expect_result = True, expect_code = 200\nexpect_msg = '操作成功'\n\n    @allure.story(\"用例--用户更新个人密码\")\n    @allure.description(\"该用例是针对用户更新个人密码接口的测试\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"token,UserId,oldPassword,newPassword, expect_result,expect_code, expect_msg\",\n                             api_data[\"test_update_password\"])\n    def test_update_password(self,get_test_user_token_fixture,get_admin_token_fixture,get_nopri_user_fixture,token,UserId\n                              ,oldPassword,newPassword,expect_result, expect_code, expect_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        if token==\"测试token\":\n            token=get_test_user_token_fixture\n        if token==\"管理员token\":\n            token=get_admin_token_fixture\n        if token==\"无权限token\":\n            token=get_nopri_user_fixture\n>       result = updata_password(id,oldPassword,newPassword,token)\n\ntest_05_updatePassword.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\api\\user_api.py:85: in updata_password\n    res = user_http_client.update_password(headers=headers,json=json)\n..\\..\\..\\api\\rbac_http_client\\user_http_client.py:28: in update_password\n    return self.post(\"/updatePasswrd\", **kwargs)\n..\\..\\..\\common\\http_client.py:15: in post\n    return self.request(url, \"POST\", headers,data, json, **kwargs)\n..\\..\\..\\common\\http_client.py:29: in request\n    self.request_log(url, method, data, json, params, headers, files, cookies)\n..\\..\\..\\common\\http_client.py:49: in request_log\n    logger.info(\"接口请求体 json 参数 ==>> {}\".format(complexjson.dumps(json, indent=4, ensure_ascii=False)))\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\__init__.py:234: in dumps\n    return cls(\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:201: in encode\n    chunks = list(chunks)\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:438: in _iterencode\n    o = _default(o)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000002063C5F2640>\no = <module 'json' from 'C:\\\\Users\\\\changan\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\json\\\\__init__.py'>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type module is not JSON serializable\n\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:179: TypeError"}, "description": "该用例是针对用户更新个人密码接口的测试", "attachments": [{"name": "log", "source": "11427c9b-3b8a-4db5-a364-0ec79610a678-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "token", "value": "'测试token'"}, {"name": "UserId", "value": "1849351355764076546"}, {"name": "oldPassword", "value": "'18592037348'"}, {"name": "newPassword", "value": "'18592037348'"}, {"name": "expect_result", "value": "True"}, {"name": "expect_code", "value": "200"}, {"name": "expect_msg", "value": "'操作成功'"}], "start": 1730711593597, "stop": 1730711593790, "uuid": "6a911d83-884c-420a-84cb-b3281e1af5f2", "historyId": "8b646b32745e052be8925a27472860a5", "testCaseId": "27f43a764f57372097798ab4b05ac0ee", "fullName": "testcases.api_test.user_test.test_05_updatePassword.TestUpdatePassword#test_update_password", "labels": [{"name": "feature", "value": "用户模块"}, {"name": "story", "value": "用例--用户更新个人密码"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test.user_test"}, {"name": "suite", "value": "test_05_updatePassword"}, {"name": "subSuite", "value": "TestUpdatePassword"}, {"name": "host", "value": "CQCA202413058N"}, {"name": "thread", "value": "25808-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.user_test.test_05_updatePassword"}]}