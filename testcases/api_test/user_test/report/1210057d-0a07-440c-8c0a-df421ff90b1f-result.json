{"name": "test_get_all_user[管理员token-0-5-萧然--男--True-200-操作成功]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected message: 操作成功, but got: 无数据\nassert '无数据' == '操作成功'\n  \n  - 操作成功\n  + 无数据", "trace": "self = <testcases.api_test.user_test.test_01_get_all_uesr.TestGetAllUser object at 0x00000188323D7B50>\nget_admin_token_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc5MzMwNiwiZXhwIjoxNzMwNzk2OTA2LCJpZCI6MTg0NjAzMDEwOTI2MDAzNDA1MH0.8nSj-QRQXRsF7-jlA27pOJ0xCvb_FzXTKSs429_921A'\nget_nopri_user_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc5MzMwNiwiZXhwIjoxNzMwNzk2OTA2LCJpZCI6MTg0NjgwMTQ0MjQzMzY4MzQ1OH0.UyCr2dNIAlKVY0Rh-NudmdD1h53hqV930QAOqmqnYJE'\ntoken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc5MzMwNiwiZXhwIjoxNzMwNzk2OTA2LCJpZCI6MTg0NjAzMDEwOTI2MDAzNDA1MH0.8nSj-QRQXRsF7-jlA27pOJ0xCvb_FzXTKSs429_921A'\npageNo = 0, pageSize = 5, name = '萧然', gender = '', phone = '男', email = ''\nexpect_result = True, expect_code = 200, expect_msg = '操作成功'\n\n    @allure.story(\"用例--获取所有用户\")\n    @allure.description(\"该用例是针对获取所有用户接口的测试\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"token,pageNo, pageSize, name, gender, phone, email, expect_result, expect_code, expect_msg\",\n                             api_data[\"test_get_all_user\"])\n    def test_get_all_user(self,get_admin_token_fixture,get_nopri_user_fixture,token,pageNo, pageSize, name, gender,\n                                  phone, email, expect_result, expect_code, expect_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        if token==\"管理员token\":\n            token=get_admin_token_fixture\n        elif token==\"无权限token\":\n            token=get_nopri_user_fixture\n        result = get_all_user(token,pageNo, pageSize, name, gender, phone, email)\n>       assert_results(result,expect_result, expect_code, expect_msg)\n\ntest_01_get_all_uesr.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresult = <api.result_api.ResultBase object at 0x00000188324D2130>\nexpect_result = True, expect_code = 200, expect_msg = '操作成功'\n\n    def assert_results(result, expect_result, expect_code, expect_msg):\n        \"\"\"\n        断言结果并记录日志。\n        参数:\n            result: 实际结果对象，应该包含success, error, data等属性。\n            expect_result: 期望的成功状态。\n            expect_code: 期望的返回code。\n            expect_msg: 期望的返回message。\n        \"\"\"\n    \n        # 断言实际结果与期望结果相同\n        assert result.success == expect_result, result.error\n        if \"接口请求失败\" in result.error:\n            assert False\n        # 记录期望和实际结果\n        logger.info(\"code ==>> 期望结果：{}， 实际结果：{}\".format(expect_code, result.data[\"code\"]))\n        logger.info(\"返回信息 ==>> 期望结果：{}， 实际结果：{}\".format(expect_msg, result.data[\"message\"]))\n        # 进一步断言返回的code和message\n        assert result.data[\"code\"] == expect_code, \"Expected code: {}, but got: {}\".format(expect_code, result.data[\"code\"])\n>       assert result.data[\"message\"] == expect_msg, \"Expected message: {}, but got: {}\".format(expect_msg,\n                                                                                                result.data[\"message\"])\nE       AssertionError: Expected message: 操作成功, but got: 无数据\nE       assert '无数据' == '操作成功'\nE         \nE         - 操作成功\nE         + 无数据\n\n..\\..\\conftest.py:33: AssertionError"}, "description": "该用例是针对获取所有用户接口的测试", "attachments": [{"name": "log", "source": "9b86eef2-9655-43c9-a922-074c67f4a000-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "token", "value": "'管理员token'"}, {"name": "pageNo", "value": "0"}, {"name": "pageSize", "value": "5"}, {"name": "name", "value": "'萧然'"}, {"name": "gender", "value": "''"}, {"name": "phone", "value": "'男'"}, {"name": "email", "value": "''"}, {"name": "expect_result", "value": "True"}, {"name": "expect_code", "value": "200"}, {"name": "expect_msg", "value": "'操作成功'"}], "start": 1730793306851, "stop": 1730793307519, "uuid": "3120f508-ce38-4c8f-9a05-82f7cb859b38", "historyId": "9a4abe515639c1d75f5d71a36720c87a", "testCaseId": "60cee388e84789d7c599726f446d95bf", "fullName": "testcases.api_test.user_test.test_01_get_all_uesr.TestGetAllUser#test_get_all_user", "labels": [{"name": "story", "value": "用例--获取所有用户"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "feature", "value": "用户模块"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test.user_test"}, {"name": "suite", "value": "test_01_get_all_uesr"}, {"name": "subSuite", "value": "TestGetAllUser"}, {"name": "host", "value": "CQCA202413058N"}, {"name": "thread", "value": "27212-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.user_test.test_01_get_all_uesr"}]}