{"name": "test_delete_resource[管理员token-1853687465346150401-True-200-操作成功]", "status": "broken", "statusDetails": {"message": "TypeError: Object of type builtin_function_or_method is not JSON serializable", "trace": "self = <testcases.api_test.resource_test.test_05_delete_resource.TestDeleteResource object at 0x000001D7EB56F1F0>\nget_admin_token_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc5MDkyNCwiZXhwIjoxNzMwNzk0NTI0LCJpZCI6MTg0NjAzMDEwOTI2MDAzNDA1MH0.UTcATEqcrqqSLswwBRVYDTo2ZNIQaNupkcl5qbJrXvU'\nget_nopri_user_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc5MDkyNSwiZXhwIjoxNzMwNzk0NTI1LCJpZCI6MTg0NjgwMTQ0MjQzMzY4MzQ1OH0.cGSTqb4iNrwae5b0Q3wMq0Bu9ajvT1hzjeoS-nCbBPo'\ntoken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc5MDkyNCwiZXhwIjoxNzMwNzk0NTI0LCJpZCI6MTg0NjAzMDEwOTI2MDAzNDA1MH0.UTcATEqcrqqSLswwBRVYDTo2ZNIQaNupkcl5qbJrXvU'\nresourceId = 1853687465346150401, expect_result = True, expect_code = 200\nexpect_msg = '操作成功'\n\n    @allure.story(\"用例--删除资源\")\n    @allure.description(\"该用例是针对删除资源接口的测试\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"token,resourceId,expect_result, expect_code, expect_msg\",\n                             api_data[\"test_delete_resource\"])\n    def test_delete_resource(self,get_admin_token_fixture,get_nopri_user_fixture,token,resourceId,expect_result, expect_code, expect_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        if token == \"管理员token\":\n            token = get_admin_token_fixture\n        elif token == \"无权限token\":\n            token = get_nopri_user_fixture\n        # print(id)\n>       result = delete_resource(get_admin_token_fixture, id)\n\ntest_05_delete_resource.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\api\\resource_api.py:97: in delete_resource\n    res = resource_http_client.delete_resource(headers=headers,params=params)\n..\\..\\..\\api\\rbac_http_client\\resource_http_client.py:33: in delete_resource\n    return self.post(\"/deleteResource\", **kwargs)\n..\\..\\..\\common\\http_client.py:15: in post\n    return self.request(url, \"POST\", headers,data, json, **kwargs)\n..\\..\\..\\common\\http_client.py:29: in request\n    self.request_log(url, method, data, json, params, headers, files, cookies)\n..\\..\\..\\common\\http_client.py:45: in request_log\n    logger.info(\"接口请求 params 参数 ==>> {}\".format(complexjson.dumps(params, indent=4, ensure_ascii=False)))\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\__init__.py:234: in dumps\n    return cls(\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:201: in encode\n    chunks = list(chunks)\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:431: in _iterencode\n    yield from _iterencode_dict(o, _current_indent_level)\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:405: in _iterencode_dict\n    yield from chunks\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:438: in _iterencode\n    o = _default(o)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000001D7EB69CA30>\no = <built-in function id>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type builtin_function_or_method is not JSON serializable\n\nC:\\Users\\changan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\encoder.py:179: TypeError"}, "description": "该用例是针对删除资源接口的测试", "attachments": [{"name": "log", "source": "ad65749b-89eb-4f5b-815a-81f629bf30ab-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "token", "value": "'管理员token'"}, {"name": "resourceId", "value": "1853687465346150401"}, {"name": "expect_result", "value": "True"}, {"name": "expect_code", "value": "200"}, {"name": "expect_msg", "value": "'操作成功'"}], "start": 1730790925206, "stop": 1730790925206, "uuid": "e6d02476-7d54-4b13-b36d-e9ca9c65a70e", "historyId": "146a7137f4c308556cd9448082ab075a", "testCaseId": "bf39d9380d0b9a20807d82332474fe4d", "fullName": "testcases.api_test.resource_test.test_05_delete_resource.TestDeleteResource#test_delete_resource", "labels": [{"name": "feature", "value": "资源模块"}, {"name": "story", "value": "用例--删除资源"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test.resource_test"}, {"name": "suite", "value": "test_05_delete_resource"}, {"name": "subSuite", "value": "TestDeleteResource"}, {"name": "host", "value": "CQCA202413058N"}, {"name": "thread", "value": "26148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.resource_test.test_05_delete_resource"}]}