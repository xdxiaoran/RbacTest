{"name": "test_add_resource[管理员token--6666-18461098006146292-type1-testDes-addPermissionList2-False-10121-资源名不能为空！]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected code: 10121, but got: 10006\nassert 10006 == 10121", "trace": "self = <testcases.api_test.resource_test.test_04_add_resource.TestAddResource object at 0x000002248B31EE20>\nget_admin_token_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc5MDI2MywiZXhwIjoxNzMwNzkzODYzLCJpZCI6MTg0NjAzMDEwOTI2MDAzNDA1MH0.n8BaZnrGijTD8KEbORiyWlAbG-qKO5Lz8yZf561wKeM'\nget_nopri_user_fixture = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc5MDI2NCwiZXhwIjoxNzMwNzkzODY0LCJpZCI6MTg0NjgwMTQ0MjQzMzY4MzQ1OH0.037aZOtOpHL6W31uoYlvnLJkRRuiE09GOsHi-8YHxfQ'\ntoken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYmFjLXVzZXIiLCJpc3MiOiJsb25nY2hhbyIsImlhdCI6MTczMDc5MDI2MywiZXhwIjoxNzMwNzkzODYzLCJpZCI6MTg0NjAzMDEwOTI2MDAzNDA1MH0.n8BaZnrGijTD8KEbORiyWlAbG-qKO5Lz8yZf561wKeM'\nresourceName = '', code = '6666', parentId = 18461098006146292, type = 'type1'\ndescription = 'testDes', addPermissionList = [], expect_result = False\nexpect_code = 10121, expect_msg = '资源名不能为空！'\n\n    @allure.story(\"用例--新增资源\")\n    @allure.description(\"该用例是针对新增资源接口的测试\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"token,resourceName,code,parentId,type,description,addPermissionList,expect_result, expect_code, expect_msg\",\n                             api_data[\"test_add_resource\"])\n    def test_add_resource(self,get_admin_token_fixture,get_nopri_user_fixture,token,resourceName,\n                          code,parentId,type,description,addPermissionList,expect_result, expect_code, expect_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        if token == \"管理员token\":\n            token = get_admin_token_fixture\n        elif token == \"无权限token\":\n            token = get_nopri_user_fixture\n        result = add_resource(token, resourceName,code,parentId,type,description,addPermissionList)\n        if result.success:\n            logger.info(\"*************** 清理用例 ***************\")\n            db.execute_db(f\"delete from resource where resource_name='{resourceName}'\")\n>       assert_results(result,expect_result, expect_code, expect_msg)\n\ntest_04_add_resource.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresult = <api.result_api.ResultBase object at 0x000002248B430B20>\nexpect_result = False, expect_code = 10121, expect_msg = '资源名不能为空！'\n\n    def assert_results(result, expect_result, expect_code, expect_msg):\n        \"\"\"\n        断言结果并记录日志。\n        参数:\n            result: 实际结果对象，应该包含success, error, data等属性。\n            expect_result: 期望的成功状态。\n            expect_code: 期望的返回code。\n            expect_msg: 期望的返回message。\n        \"\"\"\n    \n        # 断言实际结果与期望结果相同\n        assert result.success == expect_result, result.error\n        if \"接口请求失败\" in result.error:\n            assert False\n        # 记录期望和实际结果\n        logger.info(\"code ==>> 期望结果：{}， 实际结果：{}\".format(expect_code, result.data[\"code\"]))\n        logger.info(\"返回信息 ==>> 期望结果：{}， 实际结果：{}\".format(expect_msg, result.data[\"message\"]))\n        # 进一步断言返回的code和message\n>       assert result.data[\"code\"] == expect_code, \"Expected code: {}, but got: {}\".format(expect_code, result.data[\"code\"])\nE       AssertionError: Expected code: 10121, but got: 10006\nE       assert 10006 == 10121\n\n..\\..\\conftest.py:32: AssertionError"}, "description": "该用例是针对新增资源接口的测试", "attachments": [{"name": "log", "source": "d0bca3b4-5a93-45ac-8866-7f8b89096832-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "token", "value": "'管理员token'"}, {"name": "resourceName", "value": "''"}, {"name": "code", "value": "'6666'"}, {"name": "parentId", "value": "18461098006146292"}, {"name": "type", "value": "'type1'"}, {"name": "description", "value": "'testDes'"}, {"name": "addPermissionList", "value": "[]"}, {"name": "expect_result", "value": "False"}, {"name": "expect_code", "value": "10121"}, {"name": "expect_msg", "value": "'资源名不能为空！'"}], "start": 1730790266548, "stop": 1730790266968, "uuid": "3f89cd3f-9cf1-4e5d-9260-d53fdfa1428a", "historyId": "24a5e8088b7264ad72d6f321a2ac89d6", "testCaseId": "a9dedfd9dc65bba979c462503e64a5f0", "fullName": "testcases.api_test.resource_test.test_04_add_resource.TestAddResource#test_add_resource", "labels": [{"name": "feature", "value": "资源模块"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "story", "value": "用例--新增资源"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test.resource_test"}, {"name": "suite", "value": "test_04_add_resource"}, {"name": "subSuite", "value": "TestAddResource"}, {"name": "host", "value": "CQCA202413058N"}, {"name": "thread", "value": "23304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.resource_test.test_04_add_resource"}]}