{"name": "test_register[test-15320254463-男-15320254463-sada@qq.com-False-10004-账号已存在！]", "status": "failed", "statusDetails": {"message": "AssertionError: 接口返回码是 【 200 】, 返回信息：操作成功 \nassert True == False\n +  where True = <api.result_api.ResultBase object at 0x0000024EC922A4F0>.success", "trace": "self = <testcases.api_test.index_uesr_test.test_01_register.TestRegitser object at 0x0000024EC915BE20>\nuserName = 'test', password = '15320254463', gender = '男', phone = '15320254463'\nemail = 'sada@qq.com', expect_result = False, expect_code = 10004\nexpect_msg = '账号已存在！'\n\n    @allure.story(\"用例--用户注册\")\n    @allure.description(\"该用例是针对用户注册接口的测试\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"userName, password, gender, phone, email, expect_result, expect_code, expect_msg\",\n                             api_data[\"test_register\"])\n    def test_register(self, userName, password, gender, phone, email, expect_result, expect_code, expect_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        result = register(userName, password, gender, phone, email)\n        logger.info(\"*************** 成功执行后清理该数据 ***************\")\n        if result.success:\n            db.execute_db(f\"delete from user where phone={phone}\")\n>       assert_results(result,expect_result, expect_code, expect_msg)\n\ntest_01_register.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresult = <api.result_api.ResultBase object at 0x0000024EC922A4F0>\nexpect_result = False, expect_code = 10004, expect_msg = '账号已存在！'\n\n    def assert_results(result, expect_result, expect_code, expect_msg):\n        \"\"\"\n        断言结果并记录日志。\n        参数:\n            result: 实际结果对象，应该包含success, error, data等属性。\n            expect_result: 期望的成功状态。\n            expect_code: 期望的返回code。\n            expect_msg: 期望的返回message。\n        \"\"\"\n    \n        # 断言实际结果与期望结果相同\n>       assert result.success == expect_result, result.error\nE       AssertionError: 接口返回码是 【 200 】, 返回信息：操作成功 \nE       assert True == False\nE        +  where True = <api.result_api.ResultBase object at 0x0000024EC922A4F0>.success\n\n..\\..\\conftest.py:25: AssertionError"}, "description": "该用例是针对用户注册接口的测试", "attachments": [{"name": "log", "source": "146a1d2c-a105-4664-9efd-0150416450ff-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "userName", "value": "'test'"}, {"name": "password", "value": "'15320254463'"}, {"name": "gender", "value": "'男'"}, {"name": "phone", "value": "'15320254463'"}, {"name": "email", "value": "'sada@qq.com'"}, {"name": "expect_result", "value": "False"}, {"name": "expect_code", "value": "10004"}, {"name": "expect_msg", "value": "'账号已存在！'"}], "start": 1730689058937, "stop": 1730689060278, "uuid": "3f7a2b6c-3739-4c16-886a-0492ed5c6397", "historyId": "a86cd29c84935400f529258454bee51c", "testCaseId": "ce1de6727adff9873f648da1a6b8a7ea", "fullName": "testcases.api_test.index_uesr_test.test_01_register.TestRegitser#test_register", "labels": [{"name": "epic", "value": "针对单个接口的测试"}, {"name": "feature", "value": "用户公共基础模块"}, {"name": "story", "value": "用例--用户注册"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test.index_uesr_test"}, {"name": "suite", "value": "test_01_register"}, {"name": "subSuite", "value": "TestRegitser"}, {"name": "host", "value": "CQCA202413058N"}, {"name": "thread", "value": "22140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.index_uesr_test.test_01_register"}]}