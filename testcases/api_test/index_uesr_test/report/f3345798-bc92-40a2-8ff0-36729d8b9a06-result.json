{"name": "test_register[test--男-18592037350-sada@qq.com-False-10006-密码不能为空！]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected code: 10006, but got: 10001\nassert 10001 == 10006", "trace": "self = <testcases.api_test.index_uesr_test.test_01_register.TestRegitser object at 0x0000024719376A00>\nuserName = 'test', password = '', gender = '男', phone = '18592037350'\nemail = 'sada@qq.com', expect_result = False, expect_code = 10006\nexpect_msg = '密码不能为空！'\n\n    @allure.story(\"用例--用户注册\")\n    @allure.description(\"该用例是针对用户注册接口的测试\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"userName, password, gender, phone, email, expect_result, expect_code, expect_msg\",\n                             api_data[\"test_register\"])\n    def test_register(self, userName, password, gender, phone, email, expect_result, expect_code, expect_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        result = register(userName, password, gender, phone, email)\n        logger.info(\"*************** 成功执行后清理该数据 ***************\")\n        if result.success:\n            db.execute_db(f\"delete from user where phone={phone}\")\n>       assert_results(result,expect_result, expect_code, expect_msg)\n\ntest_01_register.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresult = <api.result_api.ResultBase object at 0x000002471947B5B0>\nexpect_result = False, expect_code = 10006, expect_msg = '密码不能为空！'\n\n    def assert_results(result, expect_result, expect_code, expect_msg):\n        \"\"\"\n        断言结果并记录日志。\n        参数:\n            result: 实际结果对象，应该包含success, error, data等属性。\n            expect_result: 期望的成功状态。\n            expect_code: 期望的返回code。\n            expect_msg: 期望的返回message。\n        \"\"\"\n    \n        # 断言实际结果与期望结果相同\n        assert result.success == expect_result, result.error\n        if \"接口请求失败\" in result.error:\n            assert False\n        # 记录期望和实际结果\n        logger.info(\"code ==>> 期望结果：{}， 实际结果：{}\".format(expect_code, result.data[\"code\"]))\n        logger.info(\"返回信息 ==>> 期望结果：{}， 实际结果：{}\".format(expect_msg, result.data[\"message\"]))\n        # 进一步断言返回的code和message\n>       assert result.data[\"code\"] == expect_code, \"Expected code: {}, but got: {}\".format(expect_code, result.data[\"code\"])\nE       AssertionError: Expected code: 10006, but got: 10001\nE       assert 10001 == 10006\n\n..\\..\\conftest.py:32: AssertionError"}, "description": "该用例是针对用户注册接口的测试", "attachments": [{"name": "log", "source": "8640b5a9-f1fa-49a2-a435-a1cd48620bb0-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "userName", "value": "'test'"}, {"name": "password", "value": "''"}, {"name": "gender", "value": "'男'"}, {"name": "phone", "value": "'18592037350'"}, {"name": "email", "value": "'sada@qq.com'"}, {"name": "expect_result", "value": "False"}, {"name": "expect_code", "value": "10006"}, {"name": "expect_msg", "value": "'密码不能为空！'"}], "start": 1730689430877, "stop": 1730689431140, "uuid": "13761e65-426a-49b0-9fd7-1131cc8fc524", "historyId": "74bef6dce51b83eec262340df905a869", "testCaseId": "ce1de6727adff9873f648da1a6b8a7ea", "fullName": "testcases.api_test.index_uesr_test.test_01_register.TestRegitser#test_register", "labels": [{"name": "feature", "value": "用户公共基础模块"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "story", "value": "用例--用户注册"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test.index_uesr_test"}, {"name": "suite", "value": "test_01_register"}, {"name": "subSuite", "value": "TestRegitser"}, {"name": "host", "value": "CQCA202413058N"}, {"name": "thread", "value": "25924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.index_uesr_test.test_01_register"}]}